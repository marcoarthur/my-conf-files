" set plugin and indent on
set nocompatible
filetype off
filetype plugin on
filetype indent on
syntax on
set shiftwidth=4
set tabstop=4
" set autoindent
set expandtab
" set cindent
set bg=dark
set showcmd
set nu
set title
set history=1000
set modeline
set laststatus=2
set colorcolumn=81
set clipboard=unnamedplus
set diffopt=vertical
set rtp+=~/.fzf
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn','\%81v', 100)
colorscheme elflord


" do tpope magic sourcery
execute pathogen#infect()

" Augmented path to include common Catalyst directories when editing perl
" modules

" autocmd BufReadPost *.pm set path=.,/usr/share/perl/5.14.2,lib/**,t/**,root/**,,

" Toogle a vim option
function! Toggle( opt )
    exec "set ". a:opt "!"
endfunction

" searching in web 
function! WebSearch (engine, ...)
    let sep = ' '
    let query = ''
    
    "concat the query
    for q in a:000
        let query .= sep . q
    endfor

    "run search
    exec "!g.sh " . a:engine . sep . query
endfunction

" Copy from the clipboard
function! PasteMe()
    set paste
    normal "*p
    set nopaste
endfunction

"noremap # :call SearchWord()<CR>
noremap ; :
noremap : ;

" Handle Tabs
noremap H :tabpreviou<CR>
noremap L :tabnext<CR>
noremap <leader>nn :tabnew .<CR>

" call code search on keywork
"noremap <F2> :call WebSearch('code', 'fe:' . expand('%:e'), shellescape(join(split(getline('.')))))<CR>
"noremap <F9> :call WebSearch('google', shellescape(join(split(getline('.')))))<CR>

" Maps
" All Pasting: paste file to parcellite
nmap <leader>ap :!parcellite < % <CR><CR>
"nmap <leader>pp :call PasteMe()<CR>

let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_liststyle = 3 " tree listing


set omnifunc=syntaxcomplete#Complete

" set the compilation option for latex files
let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_CompileRule_dvi      = 'latex --interaction=nonstopmode $*'
let g:Tex_CompileRule_ps       = 'dvips -Ppdf -o $*.ps $*.dvi'
let g:Tex_CompileRule_pdf      = 'ps2pdf $*.ps'

" filetype perl
let perl_fold        = 1
let perl_fold_blocks = 1
let g:Perl_Perltidy  = 'on'

" set all *.tex files as latex
"au BufReadPre,BufNewFile *.tex set ft=latex

" disable dbext maps in *.pm files
au BufReadPre,BufNewFile,FileReadPre *.pm let g:dbext_default_usermaps = 0

" Use xterm in perl debugger
let g:Perl_XtermDefaults="-fa bitstream -fs 12 -geometry 80x24"

"-----------------------------------------------------------------------------
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for Perl
"-----------------------------------------------------------------------------
noremap <silent> <F10>        :Tlist<CR>
inoremap <silent> <F10>  <C-C>:Tlist<CR>

" include POD marks in the taglist in Tag Window
let tlist_perl_settings   = 'perl;c:constants;f:formats;l:labels;p:packages;'.
                        \ 's:subroutines;d:subroutines;o:POD;t:Keyword Comments'

" set the history file for dbext
let g:dbext_default_history_file = $HOME . "/.vim/dbext_history.txt"

" default profile is UbaJobs development database
"let g:dbext_default_profile_UbaJobs = 'type=SQLITE:dbname=/home/marco/tools/sqlite3-dbix/examples/ubajobs/db/ubajobs.db'

" set the maximum column width for result window
let g:dbext_DBI_max_column_width = 200

" the default database profile
"let g:dbext_default_profile = 'UbaJobs'

" the default SQL dialect
" let g:dbext_default_SQLITE_bin = "/home/marco/bin/sqlite3.9"
"set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789."
let g:used_javascript_libs = 'angularjs,angularui,jquery'

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:showmarks_enable=0

runtime ftplugin/man.vim

" paste it from clipboard in paste mode
noremap <leader>p :set paste<CR>"*p:set nopaste<CR>

" vim-plug
call plug#begin('~/.vim/plugged')
Plug 'https://github.com/Shougo/vimshell.vim.git'
Plug 'https://github.com/Shougo/vimproc.vim.git'
Plug 'sebdah/vim-delve'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'janko/vim-test'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
call plug#end()

" Vundle
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'vim-pandoc/vim-rmarkdown'
Plugin 'posva/vim-vue'
Plugin 'vim-syntastic/syntastic'
Plugin 'leafOfTree/vim-svelte-plugin'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-sleuth'
Plugin 'itchyny/lightline.vim'
Plugin 'alvan/vim-closetag'
call vundle#end()

" Vim eslint
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npm run lint --'

"
" autoclose
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.svelte'

"
" Pandoc
"
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]

" Mappings
noremap <silent> <F3> :FZF<CR>
noremap <silent> <F11> :tabnew ~/.vimrc<CR>
noremap <silent> <F9> :make<CR>
noremap <silent> ff :FZF!<CR>
noremap <silent> \a :set autochdir<CR>
