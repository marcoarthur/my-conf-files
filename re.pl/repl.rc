#!perl

=pod
    Original rc file is https://gist.github.com/3fb14d60757e29f8ef13.
    ttakezawa++
=cut

use strict;
use warnings;
use 5.022;
use Term::ANSIColor;
use Data::Printer;
use lib qw(./lib);
use Mojo::Base -strict;
use Mojo::Pg;
use IO::Prompter;
use Mojo::Loader qw(load_class);
use Module::Format::Module;
use String::ShellQuote;
use B::Deparse;

sub main::pg_connect {
    my ( $user, $pass ) = ( $ENV{DB_PG_USER}, $ENV{DB_PG_PASS} );
    my $host  = $ENV{DB_HOST} || '127.0.0.1';
    my $dbase = $ENV{DB_NAME};
    $user  = prompt("Pg user: ")                        unless $user;
    $pass  = prompt( "$user Password: ", -echo => '*' ) unless $pass;
    $dbase = prompt("Database name: ")                  unless $dbase;
    my $dsn = "postgresql://$user:$pass\@$host/$dbase";
    my $pg  = Mojo::Pg->new( $dsn,
        { AutoCommit => 0, RaiseError => 1, PrintError => 1, InactiveDestroy => 1 } );
    return $pg;

    #return my $db = $pg->db;
}

sub main::inspect_class {
    my $class = shift;
    my $e     = load_class $class;
    die qq{ Loading "$class" failed: $e} if ref $e;
    $class = Module::Format::Module->from( { format => 'colon', value => $class } );
    my $module_file = $INC{ $class->format_as('unix') };
    my $doc         = PPI::Document->new($module_file);

    my %sub;
    for my $sub ( @{ $doc->find('PPI::Statement::Sub') || [] } ) {
        unless ( $sub->forward ) {
            $sub{ $sub->name } = $sub->content;
        }
    }

    return \%sub;
}

sub main::inspect_sub {
    my $coderef = shift;
    my $deparse = B::Deparse->new( "-p", "-sC" );
    return $deparse->coderef2text($coderef);
}

sub main::editor {
    my @lines = @_;
    my $cmd   = 'echo ' . shell_quote @lines;
    $cmd .= " | vipe | cat";
    my $out = `$cmd`;
    return $out;
}

sub main::pp { print Data::Dumper->Dump( [@_] ) }

my @plugins = (
    'ReadLineHistory',    # history saved across sessions
    'FancyPrompt',        # provide an irb-like prompt
    'OutputCache',        # access previous results
    'MultiLine::PPI',     # allow multiple lines

    'Completion',
    'CompletionDriver::Keywords',    # substr, while, etc
    'CompletionDriver::LexEnv',      # current environment
    'CompletionDriver::Globals',     # global variables
    'CompletionDriver::INC',         # loading new modules
    'CompletionDriver::Methods',     # class method completion
    'Commands',
    'ShowClass',
);

$_REPL->load_plugin($_) for @plugins;

# via http://github.com/doy/conf/blob/master/re.pl/repl.rc
$_REPL->fancy_prompt(
    sub {
        my $self = shift;
        "\ca"
          . color('blue') . "\cb"
          . $self->current_package . "\ca"
          . color('green') . "\cb" . '(0)' . "\ca"
          . color('reset') . "\cb" . '> ';
    }
);
$_REPL->fancy_continuation_prompt(
    sub {
        my $self = shift;
        "\ca"
          . color('blue') . "\cb"
          . $self->current_package . "\ca"
          . color('yellow') . "\cb" . '('
          . $self->line_depth . ')' . "\ca"
          . color('reset') . "\cb" . '> '
          . ( ' ' x ( $self->line_depth * 2 ) );
    }
);
$Devel::REPL::Plugin::Packages::PKG_SAVE = 'main';

# vim: ft=perl
